import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Search, Plus, Phone, Mail, User, Settings, Trash2 } from "lucide-react";

interface Mechanic {
  id: string;
  name: string;
  phone: string | null;
  email: string | null;
  mechanic_id: string;
  status: string;
  created_at: string;
  garage_id: string;
}

const MechanicsTab = () => {
  const [mechanics, setMechanics] = useState<Mechanic[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [addDialogOpen, setAddDialogOpen] = useState(false);
  const [formData, setFormData] = useState({
    name: "",
    phone: "",
    email: "",
  });
  const [formLoading, setFormLoading] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    loadMechanics();
  }, []);

  useEffect(() => {
    const channel = supabase
      .channel("mechanics-changes")
      .on("postgres_changes", { event: "*", schema: "public", table: "mechanics" }, () => {
        loadMechanics();
      })
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, []);

  const loadMechanics = async () => {
    try {
      const { data: user } = await supabase.auth.getUser();
      if (!user.user) return;

      const { data: garage } = await supabase
        .from("garages")
        .select("id")
        .eq("owner_id", user.user.id)
        .single();

      if (!garage) return;

      const { data, error } = await supabase
        .from("mechanics")
        .select("*")
        .eq("garage_id", garage.id)
        .order("created_at", { ascending: false });

      if (error) throw error;
      setMechanics(data || []);
    } catch (error) {
      console.error("Error loading mechanics:", error);
      toast({
        title: "Error",
        description: "Failed to load mechanics",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleAddMechanic = async (e: React.FormEvent) => {
    e.preventDefault();
    setFormLoading(true);

    try {
      const { data: user } = await supabase.auth.getUser();
      if (!user.user) throw new Error("User not authenticated");

      const { data: garage } = await supabase
        .from("garages")
        .select("id")
        .eq("owner_id", user.user.id)
        .single();

      if (!garage) throw new Error("Garage not found");

      // Insert without mechanic_id - it will be auto-generated by the trigger
      const { error } = await supabase
        .from("mechanics")
        .insert({
          garage_id: garage.id,
          name: formData.name.trim(),
          phone: formData.phone.trim() || null,
          email: formData.email.trim() || null,
        });

      if (error) throw error;

      toast({
        title: "Success",
        description: "Mechanic added successfully",
      });

      setFormData({ name: "", phone: "", email: "" });
      setAddDialogOpen(false);
    } catch (error) {
      console.error("Error adding mechanic:", error);
      toast({
        title: "Error",
        description: "Failed to add mechanic",
        variant: "destructive",
      });
    } finally {
      setFormLoading(false);
    }
  };

  const toggleMechanicStatus = async (mechanicId: string, currentStatus: string) => {
    try {
      const newStatus = currentStatus === 'active' ? 'inactive' : 'active';
      
      const { error } = await supabase
        .from("mechanics")
        .update({ status: newStatus })
        .eq("id", mechanicId);

      if (error) throw error;

      toast({
        title: "Success",
        description: `Mechanic ${newStatus === 'active' ? 'activated' : 'deactivated'}`,
      });
    } catch (error) {
      console.error("Error updating mechanic status:", error);
      toast({
        title: "Error",
        description: "Failed to update mechanic status",
        variant: "destructive",
      });
    }
  };

  const deleteMechanic = async (mechanicId: string) => {
    try {
      const { error } = await supabase
        .from("mechanics")
        .delete()
        .eq("id", mechanicId);

      if (error) throw error;

      toast({
        title: "Success",
        description: "Mechanic deleted successfully",
      });
    } catch (error) {
      console.error("Error deleting mechanic:", error);
      toast({
        title: "Error",
        description: "Failed to delete mechanic",
        variant: "destructive",
      });
    }
  };

  const filteredMechanics = mechanics.filter(mechanic =>
    mechanic.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    mechanic.mechanic_id.toLowerCase().includes(searchTerm.toLowerCase()) ||
    (mechanic.phone && mechanic.phone.includes(searchTerm)) ||
    (mechanic.email && mechanic.email.toLowerCase().includes(searchTerm.toLowerCase()))
  );

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h2 className="text-2xl font-bold">Mechanics</h2>
          <p className="text-gray-600">Manage your garage mechanics and their assignments</p>
        </div>
        
        <Dialog open={addDialogOpen} onOpenChange={setAddDialogOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="h-4 w-4 mr-2" />
              Add Mechanic
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Add New Mechanic</DialogTitle>
              <DialogDescription>
                Add a new mechanic to your garage. A unique mechanic ID will be generated automatically.
              </DialogDescription>
            </DialogHeader>
            <form onSubmit={handleAddMechanic} className="space-y-4">
              <div>
                <Label htmlFor="name">Name *</Label>
                <Input
                  id="name"
                  value={formData.name}
                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                  placeholder="Enter mechanic's full name"
                  required
                />
              </div>
              <div>
                <Label htmlFor="phone">Phone</Label>
                <Input
                  id="phone"
                  value={formData.phone}
                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                  placeholder="Enter phone number"
                />
              </div>
              <div>
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  type="email"
                  value={formData.email}
                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                  placeholder="Enter email address"
                />
              </div>
              <div className="flex justify-end gap-2">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setAddDialogOpen(false)}
                  disabled={formLoading}
                >
                  Cancel
                </Button>
                <Button type="submit" disabled={formLoading}>
                  {formLoading ? "Adding..." : "Add Mechanic"}
                </Button>
              </div>
            </form>
          </DialogContent>
        </Dialog>
      </div>

      {/* Search */}
      <div className="flex items-center gap-4">
        <div className="relative flex-1 max-w-sm">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
          <Input
            placeholder="Search mechanics..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10"
          />
        </div>
        <span className="text-sm text-gray-500">
          {filteredMechanics.length} of {mechanics.length} mechanics
        </span>
      </div>

      {/* Mechanics Table */}
      <Card>
        <CardContent className="p-0">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Mechanic</TableHead>
                <TableHead>ID</TableHead>
                <TableHead>Contact</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Added</TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredMechanics.map((mechanic) => (
                <TableRow key={mechanic.id}>
                  <TableCell>
                    <div className="flex items-center gap-2">
                      <User className="h-4 w-4 text-gray-400" />
                      <span className="font-medium">{mechanic.name}</span>
                    </div>
                  </TableCell>
                  <TableCell>
                    <Badge variant="outline">{mechanic.mechanic_id}</Badge>
                  </TableCell>
                  <TableCell>
                    <div className="space-y-1">
                      {mechanic.phone && (
                        <div className="flex items-center gap-1 text-sm">
                          <Phone className="h-3 w-3" />
                          {mechanic.phone}
                        </div>
                      )}
                      {mechanic.email && (
                        <div className="flex items-center gap-1 text-sm">
                          <Mail className="h-3 w-3" />
                          {mechanic.email}
                        </div>
                      )}
                    </div>
                  </TableCell>
                  <TableCell>
                    <Badge 
                      className={mechanic.status === 'active' 
                        ? 'bg-green-100 text-green-800' 
                        : 'bg-red-100 text-red-800'
                      }
                    >
                      {mechanic.status}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <span className="text-sm text-gray-500">
                      {new Date(mechanic.created_at).toLocaleDateString()}
                    </span>
                  </TableCell>
                  <TableCell className="text-right">
                    <div className="flex justify-end gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => toggleMechanicStatus(mechanic.id, mechanic.status)}
                      >
                        <Settings className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => deleteMechanic(mechanic.id)}
                        className="text-red-600 hover:text-red-700"
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
          
          {filteredMechanics.length === 0 && (
            <div className="text-center py-8">
              <User className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                {searchTerm ? "No mechanics found" : "No mechanics yet"}
              </h3>
              <p className="text-gray-500">
                {searchTerm 
                  ? "Try adjusting your search terms"
                  : "Add your first mechanic to get started"
                }
              </p>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default MechanicsTab;
